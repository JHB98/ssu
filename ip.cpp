#pragma warning(disable : 4996)
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define MAX_STACK_SIZE 5000
typedef char element;
typedef struct stack
{
    int data[MAX_STACK_SIZE];
    int top;
} StackType;

typedef struct var
{
    char name;
    int value;
} var;

//2+3*5+9
void init_stack(StackType *s);
int is_empty(StackType *s);
int is_full(StackType *s);
void push(StackType *s, element item);
int valid_exp(element *exp);
element peek(StackType *s);
int pop(StackType *s);
element *infix_to_postfix(element infix[]);
int eval(element *exp);
int prec(element op);
int is_digit(element item);

int main(void)
{
    var arr[100];
    int i = 0;
    int j = 0;
    int len = 0;
    char varname = '\0';
    char *exp = NULL;
    int type = -1;
    while (1)
    {
        element line[100];
        fgets(line, sizeof(line), stdin);

        for (i = 0; i < strlen(line); ++i)
        { //= ï¿½Ì¶ï¿½ï¿? ï¿½ï¿½ï¿½Ú°ï¿½ ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½
            if (line[i] == '=')
            {
                varname = line[i - 1]; //=ï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½ï¿½Ì¸ï¿½
                exp = &line[i + 1];    //=ï¿½Ú´ï¿½ ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ì´ï¿½
                break;
            }
        }

        if (i < strlen(line))
        { // forï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ i ï¿½ï¿½ï¿½ï¿½ lineï¿½ï¿½ ï¿½ï¿½ï¿½Ìºï¿½ï¿½ï¿½ ï¿½Û´Ù¸ï¿½ = ï¿½ï¿½ ï¿½Ö´ï¿½ ï¿½ï¿½ï¿½Ì¶ï¿½ï¿? ï¿½ï¿½ï¿½Ì¹Ç·ï¿½
            for (i = 0; i < len; ++i)
            {
                if (arr[i].name == varname)
                { //ï¿½ï¿½ï¿½ï¿½ï¿½Ì¸ï¿½ï¿½ï¿½ Ã£ï¿½ï¿½
                    if (valid_exp(exp) != 0)
                    {
                        element *postfix = infix_to_postfix(exp); //ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½ï¿½Ï¿ï¿½
                        arr[i].value = eval(postfix);             // ï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½Ï¿ï¿? ï¿½Ø´ï¿½ ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Æ®ï¿½Ñ´ï¿½.
                        break;
                    }
                }
            }

            if (i == len)
            { //ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½ ï¿½Ø´ï¿½ ï¿½ï¿½ï¿½ï¿½ ï¿½Ì¸ï¿½ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½ï¿½è¿­ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½Ì¹Ç·ï¿?
                element *postfix = infix_to_postfix(exp);
                arr[i].name = varname;
                arr[i].value = eval(postfix);
                ++len; //ï¿½è¿­ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ ï¿½Ï³ï¿½ ï¿½Ã¸ï¿½ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ ï¿½Ò´ï¿½ï¿½Ñ´ï¿½.
            }
        }
        else
        {

            char *ptr = strstr(line, "print"); //printï¿½ï¿½ï¿? ï¿½ï¿½ï¿½Ú¿ï¿½ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½Ç¸ï¿?
            char *exprptr = ptr + 6;           //ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½ expressionï¿½ï¿½ eprptrï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½Å²ï¿½ï¿½

            for (i = 6; i < strlen(ptr); ++i)
            {
                if ((line[i] >= 'a' && line[i] <= 'z') || (line[i] >= 'A' && line[i] <= 'Z'))
                {
                    for (j = 0; j < len; ++j)
                    {
                        if (arr[j].name == ptr[i])
                        {                               //ï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½Ç¾ï¿½ï¿½Ö´ï¿? ï¿½ï¿½ï¿½ï¿½ ï¿½Ì¸ï¿½ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½
                            ptr[i] = arr[j].value + 48; // ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½ ï¿½Ì¸ï¿½ï¿½ï¿½ ï¿½Ø´ï¿½ ï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ ï¿½Ù²Ù°ï¿½
                        }
                    }
                }
            }
            element *postfix = infix_to_postfix(exprptr); //ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ ï¿½Ù²Ù¾ï¿½ ï¿½ï¿½ï¿½ï¿½Ï°ï¿? ï¿½ï¿½ï¿½ï¿½Ñ´ï¿?
            printf("%d\n", eval(postfix));
        }
    }
    return 0;
}

int is_digit(element item)
{
    if (item >= '0' && item <= '9')
        return 1;
    return 0;
}
int valid_exp(element *exp)
{
    int i = 0;
    int j = 0;

    StackType s;
    init_stack(&s);

    //ï¿½ï¿½È£ï¿½Ö¸Â´ï¿½ï¿½ï¿½ Ã¼Å©
    while (1)
    {
        if (exp[i] == '\0' && is_empty(&s))
            break;
        else if (exp[i] == '\0' && !is_empty(&s))
        {
            printf("\n<<error ï¿½ß»ï¿½>>\n");
            printf("ï¿½ï¿½È£ ï¿½ï¿½Äª ï¿½Ò°ï¿½ï¿½ï¿½\n");
            return 0;
        }
        else if (exp[i] == '(')
        {
            push(&s, '(');
        }
        else if (exp[i] == ')')
        {
            if (s.top == -1)
            {
                printf("\n<<error ï¿½ß»ï¿½>>\n");
                printf("ï¿½ï¿½È£ ï¿½ï¿½Äª ï¿½Ò°ï¿½ï¿½ï¿½\n");
                return 0;
            }
            pop(&s);
        }
        i += 1;
    }

    //ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½ï¿½Ú°ï¿½ ï¿½Î°ï¿½ ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½
    i = 0;
    while (1)
    {
        if (exp[i] == '\0')
            break;
        else if (is_digit(exp[i]) && is_digit(exp[i + 1]))
        { //ï¿½ï¿½ï¿½Ú¸ï¿½ ï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½ï¿½Ì¸ï¿½
            printf("\n<<error ï¿½ß»ï¿½>>\n");
            printf("ï¿½ï¿½ï¿½Ú¸ï¿½ ï¿½ï¿½ ï¿½Ì»ï¿½ï¿½ï¿½ ï¿½Ô·ï¿½ ï¿½ï¿½ï¿½ï¿½\n");

            return 0;
        }
        i += 1;
    }

    //ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ /ï¿½ï¿½ 0ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½
    i = 0;
    while (1)
    {
        if (exp[i] == '\0')
            break;
        else if (exp[i] == '/' && exp[i + 1] == '0')
        {
            printf("\n<<error ï¿½ß»ï¿½>>\n");
            printf("divide by 0\n");
            return 0;
        }
        i += 1;
    }

    //ï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½ï¿½Ú¸ï¿½ ï¿½ï¿½ï¿½ï¿½ï¿½Ï´ï¿½ï¿½ï¿½ È®ï¿½ï¿½
    i = 0;
    while (1)
    {
        if (exp[i] == '\0')
            break;
        else if (exp[i] == '^' || exp[i] == '%')
        {
            printf("\n<<error ï¿½ß»ï¿½>>\n");
            printf("ï¿½ï¿½ï¿½Ü¹ï¿½ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½\n");
            return 0;
        }
        i += 1;
    }

    //ï¿½ï¿½ï¿? ï¿½ï¿½ï¿½Ì½ï¿½ï¿½ï¿½ ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½Ç¸ï¿? 1 return
    return 1;
}

element *infix_to_postfix(element infix[])
{
    element *postfix_arr = (element *)(malloc(sizeof(element) * 100));
    StackType s;
    element x, token;
    int i, j; //i-index of infix,j-index of postfix
    init_stack(&s);
    j = 0;

    //infix to postfix algorithm
    for (i = 0; infix[i] != '\0'; i++)
    {
        token = infix[i];
        if (is_digit(token)) //ï¿½ï¿½ï¿½ï¿½ï¿½Ì¸ï¿½ postfix_arrï¿½ï¿½ ï¿½Ö°ï¿½
            postfix_arr[j++] = token;
        else //ï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½È£ï¿½Ì¸ï¿½ push
            if (token == '(')
            push(&s, '(');
        else //ï¿½Ý´Â°ï¿½È£ï¿½Ì¸ï¿½ ï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½È£ï¿½ï¿½ ï¿½ï¿½ï¿½Ã¶ï¿½ ï¿½ï¿½ï¿½ï¿½ popï¿½Ï°ï¿½ ï¿½×°ï¿½ï¿½ï¿½ postfixï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½
            if (token == ')')
            while ((x = pop(&s)) != '(')
                postfix_arr[j++] = x;
        else
        {
            while (prec(token) <= prec(peek(&s)) && !is_empty(&s))
            {
                x = pop(&s);
                postfix_arr[j++] = x;
            }
            push(&s, token);
        }
    }

    while (!is_empty(&s))
    {
        x = pop(&s);
        postfix_arr[j++] = x;
    }

    postfix_arr[j] = '\0';

    return postfix_arr;
}

int prec(element op)
{
    //ï¿½ì¼±ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ ï¿½Ë»ï¿½ï¿½Ñ´ï¿½.
    switch (op)
    {
    case '(':
    case ')':
        return 0;
    case '+':
    case '-':
        return 1;
    case '*':
    case '/':
        return 2;
    }
    return -1;
}

void init_stack(StackType *s)
{
    s->top = -1;
}

int is_empty(StackType *s)
{
    return (s->top == -1);
}

int is_full(StackType *s)
{
    return (s->top == (MAX_STACK_SIZE - 1));
}

void push(StackType *s, element item)
{
    if (is_full(s))
    {
        fprintf(stderr, "ï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½È­ ï¿½ï¿½ï¿½ï¿½\n");
        return;
    }
    else
        s->data[++(s->top)] = item;
}

int pop(StackType *s)
{
    if (is_empty(s))
    {
        fprintf(stderr, "ï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½\n");
        exit(1);
    }
    else
        return s->data[(s->top)--];
}

element peek(StackType *p)
{
    return (p->data[p->top]);
}

int eval(element exp[])
{
    int op1, op2, value, i = 0;
    int len = strlen(exp);
    element ch;
    StackType s;
    init_stack(&s);
    for (i = 0; i < len; i++)
    {
        ch = exp[i];
        if (ch != '+' && ch != '-' && ch != '*' && ch != '/')
        {
            value = ch - '0'; // ï¿½Ô·ï¿½ï¿½ï¿½ ï¿½Ç¿ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ì¸ï¿½
            push(&s, value);
        }
        else
        { //ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ì¸ï¿½ ï¿½Ç¿ï¿½ï¿½ï¿½ï¿½Ú¸ï¿½ ï¿½ï¿½ï¿½Ã¿ï¿½ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½
            op2 = pop(&s);
            op1 = pop(&s);
            switch (ch)
            { //ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½ï¿½Ï°ï¿½ ï¿½ï¿½ï¿½Ã¿ï¿½ ï¿½ï¿½ï¿½ï¿½
            case '+':
                push(&s, op1 + op2);
                break;
            case '-':
                push(&s, op1 - op2);
                break;
            case '*':
                push(&s, op1 * op2);
                break;
            case '/':
                push(&s, op1 / op2);
                break;
            }
        }
    }
    return pop(&s);
}
